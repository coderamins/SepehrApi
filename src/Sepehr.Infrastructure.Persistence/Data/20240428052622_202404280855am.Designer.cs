// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sepehr.Infrastructure.Persistence.Context;

#nullable disable

namespace Sepehr.Infrastructure.Persistence.Data
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240428052622_202404280855am")]
    partial class _202404280855am
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("sepdb")
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Sepehr.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttachmentType")
                        .HasColumnType("int");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LadingExitPermitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LadingPermitId")
                        .HasColumnType("int");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurOrderTransRemittanceEntrancePermitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurOrderTransRemittanceUnloadingPermitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReceivePayId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LadingExitPermitId");

                    b.HasIndex("LadingPermitId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PurOrderTransRemittanceEntrancePermitId");

                    b.HasIndex("PurOrderTransRemittanceUnloadingPermitId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("ReceivePayId");

                    b.ToTable("Attachment", "sepdb", t =>
                        {
                            t.HasTrigger("AttachmentTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.Bank", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Banks", "sepdb", t =>
                        {
                            t.HasTrigger("BanksTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Brands", "sepdb", t =>
                        {
                            t.HasTrigger("BrandsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.CargoAnnounce", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ApprovedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CarPlaque")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CargoAnnounceNo")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(true)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CargoAnnounceNo"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverMobile")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FareAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("HasLadingPermit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShippingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnloadingPlaceAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("OrderId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("CargoAnnounces", "sepdb", t =>
                        {
                            t.HasTrigger("CargoAnnouncesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.CargoAnnounceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CargoAnnounceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("LadingAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int");

                    b.Property<int>("PackageCount")
                        .HasColumnType("int");

                    b.Property<decimal>("RealAmount")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("CargoAnnounceId");

                    b.HasIndex("OrderDetailId");

                    b.ToTable("CargoAnnounceDetails", "sepdb", t =>
                        {
                            t.HasTrigger("CargoAnnounceDetailsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.CashDesk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CashDeskDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CashDesks", "sepdb", t =>
                        {
                            t.HasTrigger("CashDesksTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.Cost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CostDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Costs", "sepdb", t =>
                        {
                            t.HasTrigger("CostsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CustomerCode")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(true)
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerCode"));

                    b.Property<int>("CustomerType")
                        .HasColumnType("int");

                    b.Property<int>("CustomerValidityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupplier")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Representative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SettlementDay")
                        .HasColumnType("int");

                    b.Property<int>("SettlementType")
                        .HasColumnType("int");

                    b.Property<string>("Tel1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerValidityId");

                    b.ToTable("Customers", "sepdb", t =>
                        {
                            t.HasTrigger("CustomersTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.CustomerOfficialCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CustomerType")
                        .HasColumnType("int");

                    b.Property<string>("EconomicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel1")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Tel2")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerOfficialCompanies", "sepdb", t =>
                        {
                            t.HasTrigger("CustomerOfficialCompaniesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.CustomerValidity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ValidityDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomerValidities", "sepdb", t =>
                        {
                            t.HasTrigger("CustomerValiditiesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.CustomerWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("CustomerWarehouses", "sepdb", t =>
                        {
                            t.HasTrigger("CustomerWarehousesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.FarePaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes", "sepdb", t =>
                        {
                            t.HasTrigger("PaymentTypesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.Income", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IncomeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Incomes", "sepdb", t =>
                        {
                            t.HasTrigger("IncomesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.InvoiceType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TypeDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceTypes", "sepdb", t =>
                        {
                            t.HasTrigger("InvoiceTypesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.LadingExitPermit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankAccountNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountOwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreditCardNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExitPermitDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("FareAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("FareAmountPayStatus")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasExitPermit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LadingExitPermitCode")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(true)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LadingExitPermitCode"), 100L);

                    b.Property<int>("LadingPermitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OtherAmount")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("LadingPermitId");

                    b.ToTable("LadingExitPermit", "sepdb", t =>
                        {
                            t.HasTrigger("LadingExitPermitTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.LadingExitPermitDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CargoAnnounceDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("LadingExitPermitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductSubUnitAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("ProductSubUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("RealAmount")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("CargoAnnounceDetailId");

                    b.HasIndex("LadingExitPermitId");

                    b.HasIndex("ProductSubUnitId");

                    b.ToTable("LadingExitPermitDetails", "sepdb", t =>
                        {
                            t.HasTrigger("LadingExitPermitDetailsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.LadingPermit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CargoAnnounceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasExitPermit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("CargoAnnounceId", "IsActive")
                        .IsUnique();

                    b.ToTable("LadingPermit", "sepdb", t =>
                        {
                            t.HasTrigger("LadingPermitTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.LadingPermitDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("LadingAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("LadingPermitId")
                        .HasColumnType("int");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int");

                    b.Property<int>("PackageCount")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseOrderDetailId")
                        .HasColumnType("int");

                    b.Property<decimal>("RealAmount")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("LadingPermitId");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("PurchaseOrderDetailId");

                    b.ToTable("LadingPermitDetail", "sepdb", t =>
                        {
                            t.HasTrigger("LadingPermitDetailTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.OfficialWarehoseInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("ApproximateInventory")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("FloorInventory")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaxInventory")
                        .HasColumnType("float");

                    b.Property<double>("MinInventory")
                        .HasColumnType("float");

                    b.Property<double>("OrderPoint")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Thickness")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("OfficialWarehoseInventories", "sepdb", t =>
                        {
                            t.HasTrigger("OfficialWarehoseInventoriesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ConfirmedStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CustomerOfficialCompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliverDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExitType")
                        .HasColumnType("int");

                    b.Property<int>("FarePaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceApproveDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTemporary")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrderCode")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(true)
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderCode"));

                    b.Property<int>("OrderExitTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OrderSendTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("OrderTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerOfficialCompanyId");

                    b.HasIndex("FarePaymentTypeId");

                    b.HasIndex("InvoiceTypeId");

                    b.HasIndex("OrderExitTypeId");

                    b.HasIndex("OrderSendTypeId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Orders", "sepdb", t =>
                        {
                            t.HasTrigger("ordertrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AlternativeProductAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<Guid?>("AlternativeProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AlternativeProductPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NumberInPackage")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PackageNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("ProductBrandId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ProductSubUnitAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("ProductSubUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProximateAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("PurchaseInvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("PurchaseSettlementDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PurchaserCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowId")
                        .HasColumnType("int");

                    b.Property<string>("SellerCompanyRow")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlternativeProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductBrandId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductSubUnitId");

                    b.HasIndex("PurchaseInvoiceTypeId");

                    b.HasIndex("PurchaserCustomerId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("OrderDetails", "sepdb", t =>
                        {
                            t.HasTrigger("OrderDetailsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.OrderExitType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ExitTypeDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("OrderExitTypes", "sepdb", t =>
                        {
                            t.HasTrigger("OrderExitTypesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.OrderPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("DaysAfterExit")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderPayments", "sepdb", t =>
                        {
                            t.HasTrigger("OrderPaymentsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.OrderSendType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("OrderSendTypes", "sepdb", t =>
                        {
                            t.HasTrigger("OrderSendTypesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.OrderService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderServices", "sepdb", t =>
                        {
                            t.HasTrigger("OrderServicesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StatusDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses", "sepdb", t =>
                        {
                            t.HasTrigger("OrderStatusesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.OrganizationBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("OrganizationBanks", "sepdb", t =>
                        {
                            t.HasTrigger("OrganizationBanksTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PettyCash", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PettyCashDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PettyCashs", "sepdb", t =>
                        {
                            t.HasTrigger("PettyCashsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ApproximateWeight")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ExchangeRate")
                        .HasColumnType("float");

                    b.Property<int>("InventotyCriticalPoint")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxInventory")
                        .HasColumnType("int");

                    b.Property<int>("MinInventory")
                        .HasColumnType("int");

                    b.Property<int>("NumberInPackage")
                        .HasColumnType("int");

                    b.Property<int>("ProductCode")
                        .HasColumnType("int");

                    b.Property<int>("ProductMainUnitId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductStandardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("ProductStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("ProductSubUnitId")
                        .HasColumnType("int");

                    b.Property<string>("ProductThickness")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCode")
                        .IsUnique();

                    b.HasIndex("ProductMainUnitId");

                    b.HasIndex("ProductStandardId");

                    b.HasIndex("ProductStateId");

                    b.HasIndex("ProductSubUnitId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Products", "sepdb", t =>
                        {
                            t.HasTrigger("ProductsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ProductBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductBrands", "sepdb", t =>
                        {
                            t.HasTrigger("ProductBrandsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Standard")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetails", "sepdb", t =>
                        {
                            t.HasTrigger("ProductDetailsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ProductInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ApproximateInventory")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("FloorInventory")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaxInventory")
                        .HasColumnType("float");

                    b.Property<double>("MinInventory")
                        .HasColumnType("float");

                    b.Property<decimal>("OnTransitInventory")
                        .HasColumnType("decimal(18,6)");

                    b.Property<double>("OrderPoint")
                        .HasColumnType("float");

                    b.Property<int>("ProductBrandId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PurchaseInventory")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ReserveInventory")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Thickness")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductBrandId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ProductInventories", "sepdb", t =>
                        {
                            t.HasTrigger("ProductInventoriesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ProductInventoryHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApproximateInventory")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("priceDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("productBrandId")
                        .HasColumnType("int");

                    b.Property<int>("productCode")
                        .HasColumnType("int");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductInventoryHistories", "sepdb", t =>
                        {
                            t.HasTrigger("ProductInventoryHistoriesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ProductPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("ProductBrandId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductBrandId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrices", "sepdb", t =>
                        {
                            t.HasTrigger("ProductPricesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ProductStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ProductStandards", "sepdb", t =>
                        {
                            t.HasTrigger("ProductStandardsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ProductState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ProductStates", "sepdb", t =>
                        {
                            t.HasTrigger("ProductStatesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ProductSupplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OverPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("PriceDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<decimal>("RentAmount")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSuppliers", "sepdb", t =>
                        {
                            t.HasTrigger("ProductSuppliersTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProductCodeSeedStart")
                        .HasColumnType("int");

                    b.Property<string>("TypeColor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes", "sepdb", t =>
                        {
                            t.HasTrigger("ProductTypesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ProductUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductUnits", "sepdb", t =>
                        {
                            t.HasTrigger("ProductUnitsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseInvoiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PurchaseInvoiceTypes", "sepdb", t =>
                        {
                            t.HasTrigger("PurchaseInvoiceTypesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ApprovingUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CustomerOfficialCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DestinationWarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("ExitType")
                        .HasColumnType("int");

                    b.Property<int>("FarePaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceApproveDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTemporary")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrderCode")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(true)
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderCode"));

                    b.Property<int>("OrderSendTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("OriginWarehouseId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerOfficialCompanyId");

                    b.HasIndex("DestinationWarehouseId");

                    b.HasIndex("FarePaymentTypeId");

                    b.HasIndex("InvoiceTypeId");

                    b.HasIndex("OrderSendTypeId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("OriginWarehouseId");

                    b.ToTable("PurchaseOrder", "sepdb", t =>
                        {
                            t.HasTrigger("PurchaseOrderTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AlternativeProductAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<Guid?>("AlternativeProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AlternativeProductPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("DeliverDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NumberInPackage")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PackageNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("ProductBrandId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ProductSubUnitAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("ProductSubUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProximateAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("PurchaseInvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("PurchaserCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowId")
                        .HasColumnType("int");

                    b.Property<decimal>("TransferedAmount")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("AlternativeProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductBrandId");

                    b.HasIndex("ProductSubUnitId");

                    b.HasIndex("PurchaseInvoiceTypeId");

                    b.HasIndex("PurchaserCustomerId");

                    b.ToTable("PurchaseOrderDetails", "sepdb", t =>
                        {
                            t.HasTrigger("PurchaseOrderDetailsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("DaysAfterExit")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("PurchaseOrderPayments", "sepdb", t =>
                        {
                            t.HasTrigger("PurchaseOrderPaymentsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("PurchaseOrderServices", "sepdb", t =>
                        {
                            t.HasTrigger("PurchaseOrderServicesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StatusDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PurchaseOrderStatus", "sepdb", t =>
                        {
                            t.HasTrigger("PurchaseOrderStatusTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderTransfers", "sepdb", t =>
                        {
                            t.HasTrigger("PurchaseOrderTransfersTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransferDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PurchaseOrderDetailId")
                        .HasColumnType("int");

                    b.Property<Guid?>("PurchaseOrderTransferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TransferedAmount")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderDetailId");

                    b.HasIndex("PurchaseOrderTransferId");

                    b.ToTable("PurchaseOrderTransferDetails", "sepdb", t =>
                        {
                            t.HasTrigger("PurchaseOrderTransferDetailsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransferRemittance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeliverDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DestinationWarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("DriverAccountNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverCreditCardNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverMobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("FareAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OriginWarehouseId")
                        .HasColumnType("int");

                    b.Property<decimal?>("OtherCosts")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Plaque")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransferRemittanceStatusId")
                        .HasColumnType("int");

                    b.Property<int>("TransferRemittanceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UnloadingPlaceAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationWarehouseId");

                    b.HasIndex("OriginWarehouseId");

                    b.HasIndex("TransferRemittanceStatusId");

                    b.HasIndex("TransferRemittanceTypeId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("TransferRemittances", "sepdb", t =>
                        {
                            t.HasTrigger("TransferRemittancesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProductBrandId")
                        .HasColumnType("int");

                    b.Property<decimal>("TransferAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("TransferRemittanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductBrandId");

                    b.HasIndex("TransferRemittanceId");

                    b.ToTable("TransferRemittanceDetails", "sepdb", t =>
                        {
                            t.HasTrigger("TransferRemittanceDetailsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceEntrancePermit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermitCode")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(true)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermitCode"), 1001L);

                    b.Property<int>("PurchaseOrderTransferRemittanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderTransferRemittanceId")
                        .IsUnique();

                    b.ToTable("PurchaseOrderTransferRemittanceEntrancePermits", "sepdb", t =>
                        {
                            t.HasTrigger("PurchaseOrderTransferRemittanceEntrancePermitsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("StatusDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransferRemittanceStatus", "sepdb", t =>
                        {
                            t.HasTrigger("TransferRemittanceStatusTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceType", b =>
                {
                    b.Property<int>("Id")
                        .IsUnicode(true)
                        .HasColumnType("int");

                    b.Property<string>("RemittanceTypeDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransferRemittanceTypes", "sepdb", t =>
                        {
                            t.HasTrigger("TransferRemittanceTypesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceUnloadingPermit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliverDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverAccountNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverCreditCardNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverMobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FareAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("FareAmountPayStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OtherCosts")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Plaque")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurchaseOrderTransferRemittanceDetailId")
                        .HasColumnType("int");

                    b.Property<Guid>("PurchaseOrderTransferRemittanceEntrancePermitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShippingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnloadingPermitCode")
                        .HasColumnType("int");

                    b.Property<string>("UnloadingPlaceAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderTransferRemittanceEntrancePermitId");

                    b.ToTable("PurchaseOrderTransferRemittanceUnloadingPermits", "sepdb", t =>
                        {
                            t.HasTrigger("PurchaseOrderTransferRemittanceUnloadingPermitsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceUnloadingPermitDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PurchaseOrderTransferRemittanceDetailId")
                        .HasColumnType("int");

                    b.Property<Guid>("PurchaseOrderTransferRemittanceUnloadingPermitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("UnloadedAmount")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderTransferRemittanceDetailId");

                    b.HasIndex("PurchaseOrderTransferRemittanceUnloadingPermitId");

                    b.ToTable("PurchaseOrderTransferRemittanceUnloadingPermitDetails", "sepdb", t =>
                        {
                            t.HasTrigger("PurchaseOrderTransferRemittanceUnloadingPermitDetailsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ReceivePay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountOwner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AccountingApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AccountingApproverId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountingDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AccountingDocNo")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("ChequeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChequeNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccountingApproval")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PayToCashDeskId")
                        .HasColumnType("int");

                    b.Property<int?>("PayToCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("PayToCostId")
                        .HasColumnType("int");

                    b.Property<Guid?>("PayToCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PayToIncomeId")
                        .HasColumnType("int");

                    b.Property<int?>("PayToOrganizationBankId")
                        .HasColumnType("int");

                    b.Property<int?>("PayToPettyCashId")
                        .HasColumnType("int");

                    b.Property<Guid?>("PayToShareHolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ReceiveFromCashDeskId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiveFromCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiveFromCostId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReceiveFromCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ReceiveFromIncomeId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiveFromOrganizationBankId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiveFromPettyCashId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReceiveFromShareHolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ReceivePayCode")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(true)
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ReceivePayCode"));

                    b.Property<int>("ReceivePayStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceivePaymentTypeFromId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceivePaymentTypeToId")
                        .HasColumnType("int");

                    b.Property<string>("TrachingCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PayToCashDeskId");

                    b.HasIndex("PayToCompanyId");

                    b.HasIndex("PayToCostId");

                    b.HasIndex("PayToCustomerId");

                    b.HasIndex("PayToIncomeId");

                    b.HasIndex("PayToOrganizationBankId");

                    b.HasIndex("PayToPettyCashId");

                    b.HasIndex("PayToShareHolderId");

                    b.HasIndex("ReceiveFromCashDeskId");

                    b.HasIndex("ReceiveFromCompanyId");

                    b.HasIndex("ReceiveFromCostId");

                    b.HasIndex("ReceiveFromCustomerId");

                    b.HasIndex("ReceiveFromIncomeId");

                    b.HasIndex("ReceiveFromOrganizationBankId");

                    b.HasIndex("ReceiveFromPettyCashId");

                    b.HasIndex("ReceiveFromShareHolderId");

                    b.HasIndex("ReceivePayStatusId");

                    b.HasIndex("ReceivePaymentTypeFromId");

                    b.HasIndex("ReceivePaymentTypeToId");

                    b.ToTable("ReceivePays", "sepdb", t =>
                        {
                            t.HasTrigger("ReceivePaysTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ReceivePayStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StatusDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReceivePayStatus", "sepdb", t =>
                        {
                            t.HasTrigger("ReceivePayStatusTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ReceivePaymentType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ReceivePaymentTypes", "sepdb", t =>
                        {
                            t.HasTrigger("ReceivePaymentTypesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.RentPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LadingExitPermitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PurchaseOrderTransferRemittanceUnloadingPermitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReceivePaymentOriginId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalFareAmount")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("LadingExitPermitId");

                    b.HasIndex("PurchaseOrderTransferRemittanceUnloadingPermitId");

                    b.HasIndex("ReceivePaymentOriginId");

                    b.ToTable("RentPayments", "sepdb", t =>
                        {
                            t.HasTrigger("RentPaymentsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Services", "sepdb", t =>
                        {
                            t.HasTrigger("ServicesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ShareHolder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("ShareHolderCode")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(true)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShareHolderCode"), 3030L);

                    b.HasKey("Id");

                    b.ToTable("ShareHolders", "sepdb", t =>
                        {
                            t.HasTrigger("ShareHoldersTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.UserEntities.ApplicationMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ApplicationMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationMenuId");

                    b.ToTable("ApplicationMenus", "sepdb", t =>
                        {
                            t.HasTrigger("ApplicationMenusTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.UserEntities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "sepdb", t =>
                        {
                            t.HasTrigger("RolesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.UserEntities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDealerUser")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", "sepdb", t =>
                        {
                            t.HasTrigger("UsersTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.UserEntities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationMenuId");

                    b.ToTable("Permissions", "sepdb", t =>
                        {
                            t.HasTrigger("PermissionsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.UserEntities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("RefreshToken", "sepdb", t =>
                        {
                            t.HasTrigger("RefreshTokenTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.UserEntities.RoleMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationMenuId");

                    b.HasIndex("ApplicationRoleId");

                    b.ToTable("RoleMenus", "sepdb", t =>
                        {
                            t.HasTrigger("RoleMenusTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.UserEntities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions", "sepdb", t =>
                        {
                            t.HasTrigger("RolePermissionsTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.UserEntities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "sepdb", t =>
                        {
                            t.HasTrigger("UserRolesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes", "sepdb", t =>
                        {
                            t.HasTrigger("VehicleTypesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseTypeId");

                    b.ToTable("Warehouses", "sepdb", t =>
                        {
                            t.HasTrigger("WarehousesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.WarehouseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("WarehouseTypes", "sepdb", t =>
                        {
                            t.HasTrigger("WarehouseTypesTrigger");
                        });
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.LadingExitPermit", "LadingExitPermit")
                        .WithMany("Attachments")
                        .HasForeignKey("LadingExitPermitId");

                    b.HasOne("Sepehr.Domain.Entities.LadingPermit", "LadingPermit")
                        .WithMany("Attachments")
                        .HasForeignKey("LadingPermitId");

                    b.HasOne("Sepehr.Domain.Entities.Order", "Order")
                        .WithMany("Attachments")
                        .HasForeignKey("OrderId");

                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceEntrancePermit", "PurOrderTransRemittanceEntrancePermit")
                        .WithMany("Attachments")
                        .HasForeignKey("PurOrderTransRemittanceEntrancePermitId");

                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceUnloadingPermit", "PurOrderTransRemittanceUnloadingPermit")
                        .WithMany("Attachments")
                        .HasForeignKey("PurOrderTransRemittanceUnloadingPermitId");

                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrder", null)
                        .WithMany("Attachments")
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("Sepehr.Domain.Entities.ReceivePay", "ReceivePay")
                        .WithMany("Attachments")
                        .HasForeignKey("ReceivePayId");

                    b.Navigation("LadingExitPermit");

                    b.Navigation("LadingPermit");

                    b.Navigation("Order");

                    b.Navigation("PurOrderTransRemittanceEntrancePermit");

                    b.Navigation("PurOrderTransRemittanceUnloadingPermit");

                    b.Navigation("ReceivePay");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.CargoAnnounce", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.UserEntities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Sepehr.Domain.Entities.Order", "Order")
                        .WithMany("CargoAnnounces")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrder", null)
                        .WithMany("CargoAnnounces")
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("Sepehr.Domain.Entities.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Order");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.CargoAnnounceDetail", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.CargoAnnounce", "CargoAnnounce")
                        .WithMany("CargoAnnounceDetails")
                        .HasForeignKey("CargoAnnounceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.OrderDetail", "OrderDetail")
                        .WithMany("CargoAnnounces")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CargoAnnounce");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.Customer", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.CustomerValidity", "CustomerValidity")
                        .WithMany()
                        .HasForeignKey("CustomerValidityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomerValidity");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.CustomerOfficialCompany", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerOfficialCompanies")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.CustomerWarehouse", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerWarehouses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("CustomerWarehouses")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.LadingExitPermit", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.LadingPermit", "LadingPermit")
                        .WithMany("LadingExitPermit")
                        .HasForeignKey("LadingPermitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LadingPermit");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.LadingExitPermitDetail", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.CargoAnnounceDetail", "CargoAnnounceDetail")
                        .WithMany()
                        .HasForeignKey("CargoAnnounceDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.LadingExitPermit", "LadingExitPermit")
                        .WithMany("LadingExitPermitDetails")
                        .HasForeignKey("LadingExitPermitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.ProductUnit", "ProductSubUnit")
                        .WithMany()
                        .HasForeignKey("ProductSubUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CargoAnnounceDetail");

                    b.Navigation("LadingExitPermit");

                    b.Navigation("ProductSubUnit");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.LadingPermit", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.CargoAnnounce", "CargoAnnounce")
                        .WithMany("LadingPermits")
                        .HasForeignKey("CargoAnnounceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.Order", null)
                        .WithMany("LadingPermits")
                        .HasForeignKey("OrderId");

                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrder", null)
                        .WithMany("LadingLicenses")
                        .HasForeignKey("PurchaseOrderId");

                    b.Navigation("CargoAnnounce");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.LadingPermitDetail", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.LadingPermit", "LadingPermit")
                        .WithMany()
                        .HasForeignKey("LadingPermitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.OrderDetail", "OrderDetail")
                        .WithMany()
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrderDetail", null)
                        .WithMany("LadingPermitDetails")
                        .HasForeignKey("PurchaseOrderDetailId");

                    b.Navigation("LadingPermit");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.OfficialWarehoseInventory", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.Product", "ProductBrand")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductBrand");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.Order", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.CustomerOfficialCompany", "CustomerOfficialCompany")
                        .WithMany()
                        .HasForeignKey("CustomerOfficialCompanyId");

                    b.HasOne("Sepehr.Domain.Entities.FarePaymentType", "FarePaymentType")
                        .WithMany()
                        .HasForeignKey("FarePaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.InvoiceType", "InvoiceType")
                        .WithMany()
                        .HasForeignKey("InvoiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.OrderExitType", "OrderExitType")
                        .WithMany()
                        .HasForeignKey("OrderExitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.OrderSendType", "OrderSendType")
                        .WithMany()
                        .HasForeignKey("OrderSendTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerOfficialCompany");

                    b.Navigation("FarePaymentType");

                    b.Navigation("InvoiceType");

                    b.Navigation("OrderExitType");

                    b.Navigation("OrderSendType");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.Product", "AlternativeProduct")
                        .WithMany()
                        .HasForeignKey("AlternativeProductId");

                    b.HasOne("Sepehr.Domain.Entities.Order", null)
                        .WithMany("Details")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.ProductBrand", "ProductBrand")
                        .WithMany()
                        .HasForeignKey("ProductBrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.ProductUnit", "ProductSubUnit")
                        .WithMany()
                        .HasForeignKey("ProductSubUnitId");

                    b.HasOne("Sepehr.Domain.Entities.PurchaseInvoiceType", "PurchaseInvoiceType")
                        .WithMany()
                        .HasForeignKey("PurchaseInvoiceTypeId");

                    b.HasOne("Sepehr.Domain.Entities.Customer", "PurchaserCustomer")
                        .WithMany()
                        .HasForeignKey("PurchaserCustomerId");

                    b.HasOne("Sepehr.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AlternativeProduct");

                    b.Navigation("Product");

                    b.Navigation("ProductBrand");

                    b.Navigation("ProductSubUnit");

                    b.Navigation("PurchaseInvoiceType");

                    b.Navigation("PurchaserCustomer");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.OrderPayment", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.Order", "Order")
                        .WithMany("OrderPayments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.OrderService", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.Order", "Order")
                        .WithMany("OrderServices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.OrganizationBank", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.Product", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.ProductUnit", "ProductMainUnit")
                        .WithMany()
                        .HasForeignKey("ProductMainUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.ProductStandard", "ProductStandard")
                        .WithMany()
                        .HasForeignKey("ProductStandardId");

                    b.HasOne("Sepehr.Domain.Entities.ProductState", "ProductState")
                        .WithMany()
                        .HasForeignKey("ProductStateId");

                    b.HasOne("Sepehr.Domain.Entities.ProductUnit", "ProductSubUnit")
                        .WithMany()
                        .HasForeignKey("ProductSubUnitId");

                    b.HasOne("Sepehr.Domain.Entities.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId");

                    b.HasOne("Sepehr.Domain.Entities.Warehouse", null)
                        .WithMany("Products")
                        .HasForeignKey("WarehouseId");

                    b.Navigation("ProductMainUnit");

                    b.Navigation("ProductStandard");

                    b.Navigation("ProductState");

                    b.Navigation("ProductSubUnit");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ProductBrand", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.Brand", "Brand")
                        .WithMany("ProductBrands")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.Product", "Product")
                        .WithMany("ProductBrands")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ProductDetail", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ProductInventory", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.ProductBrand", "ProductBrand")
                        .WithMany("ProductInventories")
                        .HasForeignKey("ProductBrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.Product", null)
                        .WithMany("ProductInventories")
                        .HasForeignKey("ProductId");

                    b.HasOne("Sepehr.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductBrand");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ProductPrice", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.ProductBrand", "ProductBrand")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductBrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.Product", null)
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId");

                    b.Navigation("ProductBrand");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ProductSupplier", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.CustomerOfficialCompany", "CustomerOfficialCompany")
                        .WithMany()
                        .HasForeignKey("CustomerOfficialCompanyId");

                    b.HasOne("Sepehr.Domain.Entities.Warehouse", "DestinationWarehouse")
                        .WithMany()
                        .HasForeignKey("DestinationWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.FarePaymentType", "FarePaymentType")
                        .WithMany()
                        .HasForeignKey("FarePaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.InvoiceType", "InvoiceType")
                        .WithMany()
                        .HasForeignKey("InvoiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.OrderSendType", "OrderSendType")
                        .WithMany()
                        .HasForeignKey("OrderSendTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrderStatus", "PurchaseOrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.Warehouse", "OriginWarehouse")
                        .WithMany()
                        .HasForeignKey("OriginWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerOfficialCompany");

                    b.Navigation("DestinationWarehouse");

                    b.Navigation("FarePaymentType");

                    b.Navigation("InvoiceType");

                    b.Navigation("OrderSendType");

                    b.Navigation("OriginWarehouse");

                    b.Navigation("PurchaseOrderStatus");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderDetail", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.Product", "AlternativeProduct")
                        .WithMany()
                        .HasForeignKey("AlternativeProductId");

                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Details")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.ProductBrand", "ProductBrand")
                        .WithMany()
                        .HasForeignKey("ProductBrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.ProductUnit", "ProductSubUnit")
                        .WithMany()
                        .HasForeignKey("ProductSubUnitId");

                    b.HasOne("Sepehr.Domain.Entities.PurchaseInvoiceType", "PurchaseInvoiceType")
                        .WithMany()
                        .HasForeignKey("PurchaseInvoiceTypeId");

                    b.HasOne("Sepehr.Domain.Entities.Customer", "PurchaserCustomer")
                        .WithMany()
                        .HasForeignKey("PurchaserCustomerId");

                    b.Navigation("AlternativeProduct");

                    b.Navigation("ProductBrand");

                    b.Navigation("ProductSubUnit");

                    b.Navigation("PurchaseInvoiceType");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("PurchaserCustomer");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderPayment", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrder", "Order")
                        .WithMany("OrderPayments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderService", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrder", "Order")
                        .WithMany("OrderServices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransfer", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransferDetail", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrderDetail", "PurchaseOrderDetail")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrderTransfer", null)
                        .WithMany("PurchaseOrderTransferDetails")
                        .HasForeignKey("PurchaseOrderTransferId");

                    b.Navigation("PurchaseOrderDetail");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransferRemittance", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.Warehouse", "DestinationWarehouse")
                        .WithMany()
                        .HasForeignKey("DestinationWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.Warehouse", "OriginWarehouse")
                        .WithMany()
                        .HasForeignKey("OriginWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceStatus", "TransferRemittanceStatus")
                        .WithMany()
                        .HasForeignKey("TransferRemittanceStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceType", "TransferRemittanceType")
                        .WithMany()
                        .HasForeignKey("TransferRemittanceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId");

                    b.Navigation("DestinationWarehouse");

                    b.Navigation("OriginWarehouse");

                    b.Navigation("TransferRemittanceStatus");

                    b.Navigation("TransferRemittanceType");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceDetail", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.ProductBrand", "ProductBrand")
                        .WithMany()
                        .HasForeignKey("ProductBrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrderTransferRemittance", "TransferRemittance")
                        .WithMany("Details")
                        .HasForeignKey("TransferRemittanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductBrand");

                    b.Navigation("TransferRemittance");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceEntrancePermit", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrderTransferRemittance", "PurchaseOrderTransferRemittance")
                        .WithOne("PurchaseOrderTransferRemittanceEntrancePermit")
                        .HasForeignKey("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceEntrancePermit", "PurchaseOrderTransferRemittanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseOrderTransferRemittance");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceUnloadingPermit", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceEntrancePermit", "PurchaseOrderTransferRemittanceEntrancePermit")
                        .WithMany("PurchaseOrderTransferRemittanceUnloadingPermits")
                        .HasForeignKey("PurchaseOrderTransferRemittanceEntrancePermitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseOrderTransferRemittanceEntrancePermit");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceUnloadingPermitDetail", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceDetail", "PurchaseOrderTransferRemittanceDetail")
                        .WithMany("PurOTransRemittUnloadingPermitDetail")
                        .HasForeignKey("PurchaseOrderTransferRemittanceDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceUnloadingPermit", "PurchaseOrderTransferRemittanceUnloadingPermit")
                        .WithMany("PurchaseOrderTransferRemittanceUnloadingPermitDetails")
                        .HasForeignKey("PurchaseOrderTransferRemittanceUnloadingPermitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseOrderTransferRemittanceDetail");

                    b.Navigation("PurchaseOrderTransferRemittanceUnloadingPermit");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ReceivePay", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.CashDesk", "PayToCashDesk")
                        .WithMany()
                        .HasForeignKey("PayToCashDeskId");

                    b.HasOne("Sepehr.Domain.Entities.CustomerOfficialCompany", "PayToCompany")
                        .WithMany()
                        .HasForeignKey("PayToCompanyId");

                    b.HasOne("Sepehr.Domain.Entities.Cost", "PayToCost")
                        .WithMany()
                        .HasForeignKey("PayToCostId");

                    b.HasOne("Sepehr.Domain.Entities.Customer", "PayToCustomer")
                        .WithMany("ReceivePaymentSourceTo")
                        .HasForeignKey("PayToCustomerId");

                    b.HasOne("Sepehr.Domain.Entities.Income", "PayToIncome")
                        .WithMany()
                        .HasForeignKey("PayToIncomeId");

                    b.HasOne("Sepehr.Domain.Entities.OrganizationBank", "PayToOrganizationBank")
                        .WithMany()
                        .HasForeignKey("PayToOrganizationBankId");

                    b.HasOne("Sepehr.Domain.Entities.PettyCash", "PayToPettyCash")
                        .WithMany()
                        .HasForeignKey("PayToPettyCashId");

                    b.HasOne("Sepehr.Domain.Entities.ShareHolder", "PayToShareHolder")
                        .WithMany()
                        .HasForeignKey("PayToShareHolderId");

                    b.HasOne("Sepehr.Domain.Entities.CashDesk", "ReceiveFromCashDesk")
                        .WithMany()
                        .HasForeignKey("ReceiveFromCashDeskId");

                    b.HasOne("Sepehr.Domain.Entities.CustomerOfficialCompany", "ReceiveFromCompany")
                        .WithMany()
                        .HasForeignKey("ReceiveFromCompanyId");

                    b.HasOne("Sepehr.Domain.Entities.Cost", "ReceiveFromCost")
                        .WithMany()
                        .HasForeignKey("ReceiveFromCostId");

                    b.HasOne("Sepehr.Domain.Entities.Customer", "ReceiveFromCustomer")
                        .WithMany("ReceivePaymentSourceFrom")
                        .HasForeignKey("ReceiveFromCustomerId");

                    b.HasOne("Sepehr.Domain.Entities.Income", "ReceiveFromIncome")
                        .WithMany()
                        .HasForeignKey("ReceiveFromIncomeId");

                    b.HasOne("Sepehr.Domain.Entities.OrganizationBank", "ReceiveFromOrganizationBank")
                        .WithMany()
                        .HasForeignKey("ReceiveFromOrganizationBankId");

                    b.HasOne("Sepehr.Domain.Entities.PettyCash", "ReceiveFromPettyCash")
                        .WithMany()
                        .HasForeignKey("ReceiveFromPettyCashId");

                    b.HasOne("Sepehr.Domain.Entities.ShareHolder", "ReceiveFromShareHolder")
                        .WithMany()
                        .HasForeignKey("ReceiveFromShareHolderId");

                    b.HasOne("Sepehr.Domain.Entities.ReceivePayStatus", "ReceivePayStatus")
                        .WithMany()
                        .HasForeignKey("ReceivePayStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.ReceivePaymentType", "ReceivePaymentTypeFrom")
                        .WithMany()
                        .HasForeignKey("ReceivePaymentTypeFromId");

                    b.HasOne("Sepehr.Domain.Entities.ReceivePaymentType", "ReceivePaymentTypeTo")
                        .WithMany()
                        .HasForeignKey("ReceivePaymentTypeToId");

                    b.Navigation("PayToCashDesk");

                    b.Navigation("PayToCompany");

                    b.Navigation("PayToCost");

                    b.Navigation("PayToCustomer");

                    b.Navigation("PayToIncome");

                    b.Navigation("PayToOrganizationBank");

                    b.Navigation("PayToPettyCash");

                    b.Navigation("PayToShareHolder");

                    b.Navigation("ReceiveFromCashDesk");

                    b.Navigation("ReceiveFromCompany");

                    b.Navigation("ReceiveFromCost");

                    b.Navigation("ReceiveFromCustomer");

                    b.Navigation("ReceiveFromIncome");

                    b.Navigation("ReceiveFromOrganizationBank");

                    b.Navigation("ReceiveFromPettyCash");

                    b.Navigation("ReceiveFromShareHolder");

                    b.Navigation("ReceivePayStatus");

                    b.Navigation("ReceivePaymentTypeFrom");

                    b.Navigation("ReceivePaymentTypeTo");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.RentPayment", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.LadingExitPermit", "LadingExitPermit")
                        .WithMany()
                        .HasForeignKey("LadingExitPermitId");

                    b.HasOne("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceUnloadingPermit", "PurchaseOrderTransferRemittanceUnloadingPermit")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderTransferRemittanceUnloadingPermitId");

                    b.HasOne("Sepehr.Domain.Entities.ReceivePaymentType", "ReceivePaymentOrigin")
                        .WithMany()
                        .HasForeignKey("ReceivePaymentOriginId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LadingExitPermit");

                    b.Navigation("PurchaseOrderTransferRemittanceUnloadingPermit");

                    b.Navigation("ReceivePaymentOrigin");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.UserEntities.ApplicationMenu", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.UserEntities.ApplicationMenu", null)
                        .WithMany("Children")
                        .HasForeignKey("ApplicationMenuId");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.UserEntities.Permission", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.UserEntities.ApplicationMenu", "ApplicationMenu")
                        .WithMany("Permissions")
                        .HasForeignKey("ApplicationMenuId");

                    b.Navigation("ApplicationMenu");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.UserEntities.RefreshToken", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.UserEntities.ApplicationUser", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.UserEntities.RoleMenu", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.UserEntities.ApplicationMenu", "ApplicationMenu")
                        .WithMany()
                        .HasForeignKey("ApplicationMenuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.UserEntities.ApplicationRole", "ApplicationRole")
                        .WithMany("RoleMenus")
                        .HasForeignKey("ApplicationRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationMenu");

                    b.Navigation("ApplicationRole");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.UserEntities.RolePermission", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.UserEntities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.UserEntities.ApplicationRole", "ApplicationRole")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.UserEntities.UserRole", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.UserEntities.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sepehr.Domain.Entities.UserEntities.ApplicationUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.Warehouse", b =>
                {
                    b.HasOne("Sepehr.Domain.Entities.WarehouseType", "WarehouseType")
                        .WithMany()
                        .HasForeignKey("WarehouseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WarehouseType");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.Brand", b =>
                {
                    b.Navigation("ProductBrands");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.CargoAnnounce", b =>
                {
                    b.Navigation("CargoAnnounceDetails");

                    b.Navigation("LadingPermits");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.Customer", b =>
                {
                    b.Navigation("CustomerOfficialCompanies");

                    b.Navigation("CustomerWarehouses");

                    b.Navigation("Orders");

                    b.Navigation("ReceivePaymentSourceFrom");

                    b.Navigation("ReceivePaymentSourceTo");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.LadingExitPermit", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("LadingExitPermitDetails");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.LadingPermit", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("LadingExitPermit");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.Order", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("CargoAnnounces");

                    b.Navigation("Details");

                    b.Navigation("LadingPermits");

                    b.Navigation("OrderPayments");

                    b.Navigation("OrderServices");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.OrderDetail", b =>
                {
                    b.Navigation("CargoAnnounces");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductBrands");

                    b.Navigation("ProductInventories");

                    b.Navigation("ProductPrices");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ProductBrand", b =>
                {
                    b.Navigation("ProductInventories");

                    b.Navigation("ProductPrices");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("CargoAnnounces");

                    b.Navigation("Details");

                    b.Navigation("LadingLicenses");

                    b.Navigation("OrderPayments");

                    b.Navigation("OrderServices");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderDetail", b =>
                {
                    b.Navigation("LadingPermitDetails");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransfer", b =>
                {
                    b.Navigation("PurchaseOrderTransferDetails");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransferRemittance", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("PurchaseOrderTransferRemittanceEntrancePermit");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceDetail", b =>
                {
                    b.Navigation("PurOTransRemittUnloadingPermitDetail");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceEntrancePermit", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("PurchaseOrderTransferRemittanceUnloadingPermits");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.PurchaseOrderTransferRemittanceUnloadingPermit", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("PurchaseOrderTransferRemittanceUnloadingPermitDetails");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.ReceivePay", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.UserEntities.ApplicationMenu", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.UserEntities.ApplicationRole", b =>
                {
                    b.Navigation("RoleMenus");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.UserEntities.ApplicationUser", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Sepehr.Domain.Entities.Warehouse", b =>
                {
                    b.Navigation("CustomerWarehouses");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
